services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{DataFixtures,Exception,Features,Entity,Repository}'
        #public: true

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    #Doctrine\ORM\EntityManager: '@doctrine.orm.default_entity_manager'
    #Doctrine\ORM\EntityManager: '@doctrine.orm.entity_manager'

    app.jwt_token_authenticator:
        class: AppBundle\Security\Guard\JWTTokenAuthenticator
        parent: lexik_jwt_authentication.security.guard.jwt_token_authenticator
        autowire: false
        autoconfigure: false
        public: true

    AppBundle\Service\ElasticSearchService:
        arguments:
            $hosts: "%elastic_search_hosts%"

    AppBundle\EventListener\DoctrineDebugListener: # TODO: disable this on production! or move to ENV
        tags:
            - {name: kernel.event_listener, event: kernel.controller, method: onKernelController}
            - {name: kernel.event_listener, event: kernel.response, method: onKernelResponse}

    AppBundle\Security\Core\RsAcl:
        public: true


    AppBundle\Repository\KeywordCompetitorRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\KeywordCompetitor]
    AppBundle\Repository\KeywordPositionLogRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\KeywordPositionLog]
    AppBundle\Repository\KeywordPositionRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\KeywordPosition]
    AppBundle\Repository\KeywordRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\Keyword]
    AppBundle\Repository\PageRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\Page]
    AppBundle\Repository\SearchEngineRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\SearchEngine]
    AppBundle\Repository\SiteRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\Site]
    AppBundle\Repository\SiteScheduleRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\SiteSchedule]
    AppBundle\Repository\SiteStampRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\SiteStamp]
    AppBundle\Repository\UserRepository:
        factory: doctrine.orm.entity_manager:getRepository
        arguments: [AppBundle\Entity\User]


    AppBundle\SearchEngine\KeywordPosition\YandexXml:
        arguments:
            $searchEngineCredentials: "%search_engine_credentials_yandex_xml%"
